size_indices = [1, 16, -1]; %-1 means full
vrr_f_indices = [0.5, 1, 2, 4, 8];
num_obs = 1;
num_points = 1000;
c = 1;
beta = 3.5;

c_t_subjective_path = 'B:\Py_codes\VRR_Real\VRR_subjective_Quest\Result_Quest_2\Observer_Yancheng_Cai_Test_10/reorder_result_no16_D_thr_result_C_t.csv';
data = readtable(c_t_subjective_path);
suffixes = {'stelaCSF', 'stelaCSF_mod', 'barten_mod', 'stelaCSF_transient', 'stelaCSF_mod_transient', ...
    'stelaCSF_cyc_1', 'stelaCSF_mod_cyc_1', 'barten_mod_cyc_1', 'stelaCSF_1cpd', 'stelaCSF_mod_1cpd', 'barten_mod_1cpd',...
    'stelaCSF_peak', 'stelaCSF_mod_peak', 'barten_mod_peak', 'stelaCSF_peak_transient', 'stelaCSF_mod_peak_transient'};

% Define other variables

stelacsf_model = CSF_stelaCSF();
stelacsf_mod_model = CSF_stelaCSF_mod();
stelacsf_transient_model = CSF_stelaCSF_transient();
stelacsf_mod_transient_model = CSF_stelaCSF_mod_transient();
barten_mod_model = CSF_stmBartenVeridical();

initial_k_values = ones(size(suffixes))' * 1000;
lb = zeros(size(initial_k_values));
ub = Inf(size(initial_k_values));

% 针对Luminance画全部
results = zeros(length(suffixes), length(vrr_f_indices), length(size_indices));
average_C_t_matrix = zeros(length(vrr_f_indices), length(size_indices)); %主观实验的结果
valids = zeros(length(vrr_f_indices), length(size_indices)); %这些主观实验是否有效
peak_spatial_frequency = linspace( 1, 10, 100)';
% 
% figure; % 创建主图
% Calculate the CSF result
for vrr_f_i = 1:length(vrr_f_indices)
    vrr_f_value = vrr_f_indices(vrr_f_i);
    for size_i = 1:length(size_indices)
        size_value = size_indices(size_i);
        filtered_data = data(data.Size_Degree == size_value & data.VRR_Frequency == vrr_f_value, :);
        if (height(filtered_data) >= 1)
            valids(vrr_f_i, size_i) = 1;
        else
            continue
        end
        valid_data = filtered_data(~isnan(filtered_data.C_t), :);
        average_C_t = mean(valid_data.C_t);
        luminance = mean(valid_data.Luminance);
        if (size_value == -1)
            area_value = 62.666 * 37.808;
        else
            area_value = size_value^2;
        end
        average_C_t_matrix(vrr_f_i, size_i) = average_C_t;

        csf_pars = struct('s_frequency', 1, 't_frequency', vrr_f_value, 'orientation', 0, 'luminance', luminance, 'area', area_value, 'eccentricity', 0);
        [results(1,vrr_f_i,size_i), results(2,vrr_f_i,size_i), results(3,vrr_f_i,size_i)] = multiple_contrast_energy_detectors(luminance, c, beta, num_points, vrr_f_value, area_value);
        [results(4,vrr_f_i,size_i), results(5,vrr_f_i,size_i)] = multiple_contrast_energy_detectors_transient(luminance, c, beta, num_points, vrr_f_value, area_value);
        [results(6,vrr_f_i,size_i), results(7,vrr_f_i,size_i), results(8,vrr_f_i,size_i)] = multiple_contrast_energy_detectors_cyc_1(luminance, c, beta, num_points, vrr_f_value, area_value);
        results(9,vrr_f_i,size_i) = stelacsf_model.sensitivity(csf_pars);
        results(10,vrr_f_i,size_i) = stelacsf_mod_model.sensitivity(csf_pars);
        results(11,vrr_f_i,size_i) = barten_mod_model.sensitivity(csf_pars);

        csf_pars_peak = struct('s_frequency', peak_spatial_frequency, 't_frequency', vrr_f_value, 'orientation', 0, 'luminance', luminance, 'area', area_value, 'eccentricity', 0);
        results(12,vrr_f_i,size_i) = max(stelacsf_model.sensitivity(csf_pars_peak));
        results(13,vrr_f_i,size_i) = max(stelacsf_mod_model.sensitivity(csf_pars_peak));
        results(14,vrr_f_i,size_i) = max(barten_mod_model.sensitivity(csf_pars_peak));
        results(15,vrr_f_i,size_i) = max(stelacsf_transient_model.sensitivity(csf_pars_peak));
        results(16,vrr_f_i,size_i) = max(stelacsf_mod_transient_model.sensitivity(csf_pars_peak));
    end
end

% 拟合参数
optimized_k_values = zeros(length(suffixes), 1);
fvals = zeros(length(suffixes), 1);

for csf_model_i = 1:length(suffixes)
   current_result = squeeze(results(csf_model_i, :, :));
   current_initial_k_value = initial_k_values(csf_model_i);
   % loss = nansum(nansum((1./(current_initial_k_value.*current_result) - average_C_t_matrix).^2.*valids));
   objective_function = @(k_value) nansum(nansum((1./(k_value.*current_result) - average_C_t_matrix).^2.*valids)).*1e10;
   lb = 0;  % 下界
   ub = 5000; % 上界
   options = optimset('Display', 'iter'); % 显示优化过程
   [optimized_k_value, fval] = fmincon(@(k_value) objective_function(k_value), current_initial_k_value, [], [], [], [], lb, ub, [], options);
   optimized_k_values(csf_model_i) = optimized_k_value;
   fvals(csf_model_i) = fval./1e10;
end

disp(['Optimized k_values: ', num2str(optimized_k_values')]);
disp(['Objective function value at optimum: ', num2str(fvals')]);
C_t_s = 1./(optimized_k_values.*results);
subplot(length(size_indices), length(luminance_indices), (find(size_indices == size_value)-1)*length(luminance_indices) + find(luminance_indices == luminance_value));
hold on;
plot(area_CSF_list, C_t_s(1,:), 'r-', 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF (Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(1), fvals(1)));
    plot(area_CSF_list, C_t_s(2,:), 'g-', 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF_{mod} (Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(2), fvals(2)));
    plot(area_CSF_list, C_t_s(3,:), 'b-', 'LineWidth', 1.5, 'DisplayName', sprintf('Barten_{mod} (Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(3), fvals(3)));
    plot(area_CSF_list, C_t_s(4,:), 'c-', 'LineWidth', 3, 'DisplayName', sprintf('stelaCSF transient (Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(4), fvals(4)));
    plot(area_CSF_list, C_t_s(5,:), 'm-', 'LineWidth', 3, 'DisplayName', sprintf('stelaCSF_{mod} transient (Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(5), fvals(5)));
    plot(area_CSF_list, C_t_s(6,:), 'y-', 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF (*frequency Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(6), fvals(6)));
    plot(area_CSF_list, C_t_s(7,:), 'k-', 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF_{mod} (*frequency Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(7), fvals(7)));
    plot(area_CSF_list, C_t_s(8,:), 'Color', [0.5, 0.2, 0.8], 'LineWidth', 1.5, 'DisplayName', sprintf('Barten_{mod} (*frequency Energy) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(8), fvals(8)));
    plot(area_CSF_list, C_t_s(9,:), 'Color', [0.8, 0.4, 0.2], 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF (1 cpd) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(9), fvals(9)));
    plot(area_CSF_list, C_t_s(10,:), 'Color', [0.2, 0.6, 0.4], 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF_{mod} (1 cpd) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(10), fvals(10)));
    plot(area_CSF_list, C_t_s(11,:), 'Color', [0.1, 0.9, 0.3], 'LineWidth', 1.5, 'DisplayName', sprintf('Barten_{mod} (1 cpd) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(11), fvals(11)));
    plot(area_CSF_list, C_t_s(12,:), 'Color', [0.4, 0.3, 0.6], 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF (Peak) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(12), fvals(12)));
    plot(area_CSF_list, C_t_s(13,:), 'Color', [0.6, 0.2, 0.5], 'LineWidth', 1.5, 'DisplayName', sprintf('stelaCSF_{mod} (Peak) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(13), fvals(13)));
    plot(area_CSF_list, C_t_s(14,:), 'Color', [0.8, 0.1, 0.7], 'LineWidth', 1.5, 'DisplayName', sprintf('Barten_{mod} (Peak) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(14), fvals(14)));
    plot(area_CSF_list, C_t_s(15,:), 'Color', [0.3, 0.6, 0.3], 'LineWidth', 3, 'DisplayName', sprintf('stelaCSF transient (Peak) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(15), fvals(15)));
    plot(area_CSF_list, C_t_s(16,:), 'Color', [0.9, 0.7, 0.1], 'LineWidth', 3, 'DisplayName', sprintf('stelaCSF_{mod} transient (Peak) - k: %.4f, loss (*1e8): %.4f', optimized_k_values(16), fvals(16)));
    scatter(area_value_list, average_C_t_list, 200, 'Marker', 'o', 'MarkerFaceColor', 'r', 'MarkerEdgeColor', 'k', 'LineWidth', 1.0, 'DisplayName', 'Subjective Result');
    hold off;
    xlabel('Size (degree^2)');
    ylabel('C_t (Average across Observers)');
    title(['Size: ' num2str(size_value) '\times' num2str(size_value) ' degree, Luminance: ' num2str(luminance_value) ' nits']);
    set(gca, 'XScale', 'log');
    set(gca, 'YScale', 'log');
    % xlim([1, 10]);
    legend('show'); % 添加图例